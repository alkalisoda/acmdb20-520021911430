package simpledb;

import java.io.*;
import java.util.concurrent.ConcurrentHashMap;

import java.util.ArrayList;
// import java.util.Random;
import java.util.Vector;

/**
 * BufferPool manages the reading and writing of pages into memory from
 * disk. Access methods call into it to retrieve pages, and it fetches
 * pages from the appropriate location.
 * <p>
 * The BufferPool is also responsible for locking;  when a transaction fetches
 * a page, BufferPool checks that the transaction has the appropriate
 * locks to read/write the page.
 * 
 * @Threadsafe, all fields are final
 */
public class BufferPool {
    /** Bytes per page, including header. */
    private static final int PAGE_SIZE = 4096;

    private static int pageSize = PAGE_SIZE;

    private int numPages;
    private final ConcurrentHashMap<PageId,Integer> age_buffer;
    private final ConcurrentHashMap<PageId,Page> page_buffer;
    private int age;
    private LockManager lockManager;
    
    /** Default number of pages passed to the constructor. This is used by
    other classes. BufferPool should use the numPages argument to the
    constructor instead. */
    public static final int DEFAULT_PAGES = 50;

    private class Lock{
        private static final int SHARE = 0;
        private static final int EXCLUSIVE = 1;
        private TransactionId tid;
        private int type;
         public Lock(TransactionId tid, int type){
            this.tid = tid;
            this.type = type;
        }
        public TransactionId getTid(){
            return tid;
        }
        public int getType(){
            return type;
        }
        public void setType(int type){
            this.type = type;
        }
    }


    private class LockManager{
        ConcurrentHashMap<PageId, ConcurrentHashMap<TransactionId, Lock>> lockHashMap = new ConcurrentHashMap<>();

        public LockManager(){
            lockHashMap = new ConcurrentHashMap<PageId, ConcurrentHashMap<TransactionId, Lock>>();
        }

        public synchronized boolean acquireLock(PageId pid, TransactionId tid, int type){
            if (lockHashMap.get(pid) == null){
                Lock lock = new Lock(tid, type);

                Vector<Lock> locks = new Vector<>();
                locks.add(lock);
                lockHashMap.put(pid, locks);

                return true;
            } else {
                Vector<Lock> locks = lockHashMap.get(pid);

                for (Lock lock : locks){
                    if (lock.tid == tid){
                        if (lock.lockType == type){
                            return true;
                        }
                        if (lock.lockType == 1){
                            return true;
                        }
                        if (locks.size() == 1){
                            lock.lockType = 1;
                            return true;
                        } else {
                            return false;
                        }
                    }
                }

                if (locks.get(0).lockType == 1){
                    assert locks.size() == 1 : "Xlock cannot be more than one.";
                    return false;
                }

                if (type == 0){
                    Lock lock = new Lock(tid, 0);
                    locks.add(lock);
                    lockHashMap.put(pid, locks);
                    return true;
                }

                return false;
            }

        }

        public synchronized boolean releaseLock(PageId pid, TransactionId tid){
            assert lockHashMap.get(pid) != null : "page has no lock" ;

            Vector<Lock> locks = lockHashMap.get(pid);

            for (Lock lock : locks){
                if(lock.tid == tid){
                    locks.remove(lock);

                    if (locks.size() == 0){
                        lockHashMap.remove(pid);
                    }

                    return true;
                }
            }

            return false;
        }

        public synchronized boolean holdsLock(PageId pid, TransactionId tid){
            if (lockHashMap.get(pid) == null){
                return false;
            }

            Vector<Lock> locks = lockHashMap.get(pid);
            for (Lock lock : locks){
                if (lock.tid == tid){
                    return true;
                }
            }

            return false;
        }
        
    }



    /**
     * Creates a BufferPool that caches up to numPages pages.
     *
     * @param numPages maximum number of pages in this buffer pool.
     */
    public BufferPool(int numPages) {
        // some code goes here
        this.numPages = numPages;

        page_buffer = new ConcurrentHashMap<PageId, Page>();
        age_buffer = new ConcurrentHashMap<PageId, Integer>();

        age = 0;
        lockManager = new LockManager();
    }
    
    public static int getPageSize() {
      return pageSize;
    }
    
    // THIS FUNCTION SHOULD ONLY BE USED FOR TESTING!!
    public static void setPageSize(int pageSize) {
    	BufferPool.pageSize = pageSize;
    }
    
    // THIS FUNCTION SHOULD ONLY BE USED FOR TESTING!!
    public static void resetPageSize() {
    	BufferPool.pageSize = PAGE_SIZE;
    }

    /**
     * Retrieve the specified page with the associated permissions.
     * Will acquire a lock and may block if that lock is held by another
     * transaction.
     * <p>
     * The retrieved page should be looked up in the buffer pool.  If it
     * is present, it should be returned.  If it is not present, it should
     * be added to the buffer pool and returned.  If there is insufficient
     * space in the buffer pool, an page should be evicted and the new page
     * should be added in its place.
     *
     * @param tid the ID of the transaction requesting the page
     * @param pid the ID of the requested page
     * @param perm the requested permissions on the page
     */
    public  Page getPage(TransactionId tid, PageId pid, Permissions perm)
        throws TransactionAbortedException, DbException {
        // some code goes here
        /* 
        int code = pid.hashCode();
        if(buffer_pool.containsKey(code)){
            return buffer_pool.get(code);
        }
        else{
            if (numPages < buffer_pool.size()){
                evictPage();
            }
            DbFile dbfile = Database.getCatalog().getDatabaseFile(pid.getTableId());
            Page page = dbfile.readPage(pid);
            buffer_pool.put(code, page);
            return page;
        }*/
        int lockType;

        if(perm == Permissions.READ_ONLY){
            lockType = 0;
        }else{
            lockType = 1;
        }
        boolean lockAcquired = false;

        long start = System.currentTimeMillis();
        long timeout = 500;
        while(! lockAcquired){
            long now = System.currentTimeMillis();
            if (now - start > timeout){
                throw new TransactionAbortedException();
            }
            lockAcquired = lockManager.acquireLock(pid, tid, lockType);
        }
 
        if(!page_buffer.containsKey(pid)){
            int tableId = pid.getTableId();
            DbFile dbFile = Database.getCatalog().getDatabaseFile(tableId);
            Page page = dbFile.readPage(pid);
 
            if(page_buffer.size()>=numPages){
                evictPage();
            }
            page_buffer.put(pid,page);
            age_buffer.put(pid,age++);
            return page;
        }
        return page_buffer.get(pid);
    }

    /**
     * Releases the lock on a page.
     * Calling this is very risky, and may result in wrong behavior. Think hard
     * about who needs to call this and why, and why they can run the risk of
     * calling it.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param pid the ID of the page to unlock
     */
    public  void releasePage(TransactionId tid, PageId pid) {
        // some code goes here
        // not necessary for lab1|lab2
        lockManager.releaseLock(pid, tid);
    }

    /**
     * Release all locks associated with a given transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     */
    public void transactionComplete(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
        transactionComplete(tid, true);
    }

    /** Return true if the specified transaction has a lock on the specified page */
    public boolean holdsLock(TransactionId tid, PageId p) {
        // some code goes here
        // not necessary for lab1|lab2
        return lockManager.holdsLock(p, tid);
    }

    /**
     * Commit or abort a given transaction; release all locks associated to
     * the transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param commit a flag indicating whether we should commit or abort
     */
    public void transactionComplete(TransactionId tid, boolean commit)
        throws IOException {
        // some code goes here
        // not necessary for lab1|lab2

        if (commit){
            flushPages(tid);
        }else{
            restorePages(tid);
        }

        for (PageId pid : page_buffer.keySet()){
            if (holdsLock(tid, pid)){
                releasePage(tid, pid);
            }
        }

    }

    private synchronized void restorePages(TransactionId tid){
        for (PageId pid : page_buffer.keySet()){
            Page page = page_buffer.get(pid);

            if (page.isDirty() == tid){
                int tableId = pid.getTableId();
                DbFile dbFile = Database.getCatalog().getDatabaseFile(tableId);
                Page dbPage = dbFile.readPage(pid);

                page_buffer.put(pid, dbPage);
                // age_buffer.put(pid, age++);
            }
        }
    }

    /**
     * Add a tuple to the specified table on behalf of transaction tid.  Will
     * acquire a write lock on the page the tuple is added to and any other 
     * pages that are updated (Lock acquisition is not needed for lab2). 
     * May block if the lock(s) cannot be acquired.
     * 
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and adds versions of any pages that have 
     * been dirtied to the cache (replacing any existing versions of those pages) so 
     * that future requests see up-to-date pages. 
     *
     * @param tid the transaction adding the tuple
     * @param tableId the table to add the tuple to
     * @param t the tuple to add
     */
    public void insertTuple(TransactionId tid, int tableId, Tuple t)
        throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        // not necessary for lab1
        DbFile dbFile = Database.getCatalog().getDatabaseFile(tableId);
        ArrayList<Page> pList = dbFile.insertTuple(tid, t);
        for (Page p : pList){
            p.markDirty(true,tid);
            if (page_buffer.size() >= numPages){
                evictPage();
            }
            page_buffer.put(p.getId(), p);
        }
    }

    /**
     * Remove the specified tuple from the buffer pool.
     * Will acquire a write lock on the page the tuple is removed from and any
     * other pages that are updated. May block if the lock(s) cannot be acquired.
     *
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and adds versions of any pages that have 
     * been dirtied to the cache (replacing any existing versions of those pages) so 
     * that future requests see up-to-date pages. 
     *
     * @param tid the transaction deleting the tuple.
     * @param t the tuple to delete
     */
    public  void deleteTuple(TransactionId tid, Tuple t)
        throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        // not necessary for lab1
        DbFile dbFile = Database.getCatalog().getDatabaseFile(t.getRecordId().getPageId().getTableId());
        ArrayList<Page> pList = dbFile.deleteTuple(tid, t);
        for (Page p : pList){
            p.markDirty(true,tid);
            if (page_buffer.size() >= numPages){
                evictPage();
            }
            page_buffer.put(p.getId(), p);
        }
    }

    /**
     * Flush all dirty pages to disk.
     * NB: Be careful using this routine -- it writes dirty data to disk so will
     *     break simpledb if running in NO STEAL mode.
     */
    public synchronized void flushAllPages() throws IOException {
        // some code goes here
        // not necessary for lab1
        for (Page p : page_buffer.values()){
            flushPage(p.getId());
        }
    }

    /** Remove the specific page id from the buffer pool.
        Needed by the recovery manager to ensure that the
        buffer pool doesn't keep a rolled back page in its
        cache.
        
        Also used by B+ tree files to ensure that deleted pages
        are removed from the cache so they can be reused safely
    */
    public synchronized void discardPage(PageId pid) {
        // some code goes here
        // not necessary for lab1
        page_buffer.remove(pid);
        age_buffer.remove(pid);
    }

    /**
     * Flushes a certain page to disk
     * @param pid an ID indicating the page to flush
     */
    private synchronized void flushPage(PageId pid) throws IOException {
        Page p = page_buffer.get(pid);
        DbFile dbFile = Database.getCatalog().getDatabaseFile(pid.getTableId());
        if ((p != null) && (p.isDirty() != null)){
            dbFile.writePage(p);
            p.markDirty(false, null);
        }
    }

    /** Write all pages of the specified transaction to disk.
     */
    public synchronized  void flushPages(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
        for (PageId pid : page_buffer.keySet()){
            Page page = page_buffer.get(pid);
            if (page.isDirty() == tid){
                flushPage(pid);
            }
        }
    }

    /**
     * Discards a page from the buffer pool.
     * Flushes the page to disk to ensure dirty pages are updated on disk.
     */
    private synchronized  void evictPage() throws DbException {
        // some code goes here
        // not necessary for lab1
        /*
       for(Page p : page_buffer.values()){
        
            PageId pid = p.getId();
            try{
                flushPage(pid);
            }catch(IOException e){
                e.printStackTrace();
            }
            discardPage(pid);

        }*/

        PageId pageId = null;
        int oldest = -1;
        for (PageId pid : page_buffer.keySet()){
            Page p = page_buffer.get(pid);

            if (p.isDirty() != null){
                continue;
            }
            if (pageId == null){
                oldest = age_buffer.get(pid);
                pageId = pid;
                continue;
            }
            if (age_buffer.get(pid) < oldest){
                pageId = pid;
                oldest = age_buffer.get(pid);
            }
        }
        discardPage(pageId);
    }

}
