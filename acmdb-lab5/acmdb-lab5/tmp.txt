package simpledb;

import java.io.*;
import java.util.concurrent.ConcurrentHashMap;

import java.util.ArrayList;
// import java.util.Random;
import java.util.Vector;

/**
 * BufferPool manages the reading and writing of pages into memory from
 * disk. Access methods call into it to retrieve pages, and it fetches
 * pages from the appropriate location.
 * <p>
 * The BufferPool is also responsible for locking;  when a transaction fetches
 * a page, BufferPool checks that the transaction has the appropriate
 * locks to read/write the page.
 * 
 * @Threadsafe, all fields are final
 */
public class BufferPool {
    /** Bytes per page, including header. */
    private static final int PAGE_SIZE = 4096;

    private static int pageSize = PAGE_SIZE;

    private int numPages;
    private final ConcurrentHashMap<PageId,LinkedNode> page_buffer;
    private static class LinkedNode{
        PageId pageId;
        Page page;
        LinkedNode prev;
        LinkedNode next;
        public LinkedNode(PageId pageId, Page page){
            this.pageId = pageId;
            this.page = page;
        }
    }
    LinkedNode head;
    LinkedNode tail;
    private void addToHead(LinkedNode node){
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
    }

    private void remove(LinkedNode node){
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }

    private void moveToHead(LinkedNode node){
        remove(node);
        addToHead(node);
    }

    private LinkedNode removeTail(){
        LinkedNode node = tail.prev;
        remove(node);
        return node;
    }

    private LockManager lockManager;
    
    /** Default number of pages passed to the constructor. This is used by
    other classes. BufferPool should use the numPages argument to the
    constructor instead. */
    public static final int DEFAULT_PAGES = 50;

    private class Lock{
        private static final int SHARE = 0;
        private static final int EXCLUSIVE = 1;
        private TransactionId tid;
        private int type;
         public Lock(TransactionId tid, int type){
            this.tid = tid;
            this.type = type;
        }
        public TransactionId getTid(){
            return tid;
        }
        public int getType(){
            return type;
        }
        public void setType(int type){
            this.type = type;
        }
    }


    private class LockManager{
        ConcurrentHashMap<PageId, ConcurrentHashMap<TransactionId, Lock>> lockHashMap = new ConcurrentHashMap<>();

        public LockManager(){
            lockHashMap = new ConcurrentHashMap<PageId, ConcurrentHashMap<TransactionId, Lock>>();
        }

        public synchronized boolean acquireLock(PageId pid, TransactionId tid, int type){
            ConcurrentHashMap <TransactionId, Lock> plocks = lockHashMap.get(pid);

            if (plocks.get(tid) == null){
                if (plocks.size() > 1){
                    // Slock
                    if (type == Lock.SHARE){
                        Lock lock = new Lock(tid, type);
                        plocks.put(tid, lock);
                        lockHashMap.put(pid, plocks);
                        return true;
                    }
                    // Xlock
                    else if (type == Lock.EXCLUSIVE){
                        return false;
                    }
                }

                if (plocks.size() == 1) {
                    Lock curLock = null;
    
                    for (Lock l : plocks.values()){
                        curLock = l;
                    }
    
                    if (curLock.getType() == Lock.SHARE){
                        if (type == Lock.SHARE){
                            Lock lock = new Lock(tid, type);
                            plocks.put(tid, lock);
                            lockHashMap.put(pid, plocks);
                            return true;
                        }
    
                        else if (type == Lock.EXCLUSIVE){
                            return false;
                        }
                    }
                    else if (curLock.getType() == Lock.EXCLUSIVE){
                        return false;
                    }
                }
            }
            else if (plocks.get(tid) != null){
                Lock lock = plocks.get(tid);

                if (lock.getType() == Lock.SHARE){
                    if (type == Lock.SHARE){
                        return true;
                    }
                    else if (type == Lock.EXCLUSIVE){
                        if (plocks.size() == 1){
                            lock.setType(type);
                            plocks.put(tid, lock);
                            return true;
                        }
                        else if (plocks.size() > 1){
                            return false;
                        }
                    }
                }

                return lock.getType() == Lock.EXCLUSIVE;
            }

            return false;
            
           
        }

        public synchronized boolean releaseLock(TransactionId tid, PageId pid){
            if(holdsLock(tid, pid)){
                ConcurrentHashMap<TransactionId, Lock> plocks = lockHashMap.get(pid);
                plocks.remove(tid);
                if (plocks.size() == 0){
                    lockHashMap.remove(pid);
                }
                return true;
            }
            return false;
        }

        public synchronized boolean holdsLock(TransactionId tid, PageId pid){
            ConcurrentHashMap<TransactionId, Lock>  plocks = lockHashMap.get(pid);
            if (plocks == null){
                return false;
            }
            Lock lock = plocks.get(tid);
            if (lock == null){
                return false;
            }
            return true;
        }
        
        public synchronized void transactionComplete(TransactionId tid){
            for (PageId pid : lockHashMap.keySet()){
                releaseLock(tid, pid);
            }
        }
    }



    /**
     * Creates a BufferPool that caches up to numPages pages.
     *
     * @param numPages maximum number of pages in this buffer pool.
     */
    public BufferPool(int numPages) {
        // some code goes here
        this.numPages = numPages;

        page_buffer = new ConcurrentHashMap<PageId, LinkedNode>();
        head = new LinkedNode(new HeapPageId(-1, -1), null);
        tail = new LinkedNode(new HeapPageId(-1, -1), null);
        head.next = tail;
        tail.prev = head;

        lockManager = new LockManager();
    }
    
    public static int getPageSize() {
      return pageSize;
    }
    
    // THIS FUNCTION SHOULD ONLY BE USED FOR TESTING!!
    public static void setPageSize(int pageSize) {
    	BufferPool.pageSize = pageSize;
    }
    
    // THIS FUNCTION SHOULD ONLY BE USED FOR TESTING!!
    public static void resetPageSize() {
    	BufferPool.pageSize = PAGE_SIZE;
    }

    /**
     * Retrieve the specified page with the associated permissions.
     * Will acquire a lock and may block if that lock is held by another
     * transaction.
     * <p>
     * The retrieved page should be looked up in the buffer pool.  If it
     * is present, it should be returned.  If it is not present, it should
     * be added to the buffer pool and returned.  If there is insufficient
     * space in the buffer pool, an page should be evicted and the new page
     * should be added in its place.
     *
     * @param tid the ID of the transaction requesting the page
     * @param pid the ID of the requested page
     * @param perm the requested permissions on the page
     */
    public  Page getPage(TransactionId tid, PageId pid, Permissions perm)
        throws TransactionAbortedException, DbException {
        // some code goes here
        /* 
        int code = pid.hashCode();
        if(buffer_pool.containsKey(code)){
            return buffer_pool.get(code);
        }
        else{
            if (numPages < buffer_pool.size()){
                evictPage();
            }
            DbFile dbfile = Database.getCatalog().getDatabaseFile(pid.getTableId());
            Page page = dbfile.readPage(pid);
            buffer_pool.put(code, page);
            return page;
        }*/
        int lockType = perm == Permissions.READ_ONLY ? Lock.SHARE : Lock.EXCLUSIVE;

        long startTime = System.currentTimeMillis();
        boolean isAcquired = false;
        while(!isAcquired){
            isAcquired = lockManager.acquireLock(pid, tid, lockType);
            long now = System.currentTimeMillis();
            if(now - startTime > 500){
                throw new TransactionAbortedException();
            }
        }

        if (! page_buffer.contains(pid)){
            DbFile dbFile = Database.getCatalog().getDatabaseFile((pid.getTableId()));
            Page page = dbFile.readPage(pid);

            if (page_buffer.size() >= numPages){
                evictPage();
            }

            LinkedNode node = new LinkedNode(pid, page);
            page_buffer.put(pid, node);
            addToHead(node);
        }

        moveToHead(page_buffer.get(pid));
        return page_buffer.get(pid).page;
    }

    /**
     * Releases the lock on a page.
     * Calling this is very risky, and may result in wrong behavior. Think hard
     * about who needs to call this and why, and why they can run the risk of
     * calling it.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param pid the ID of the page to unlock
     */
    public  void releasePage(TransactionId tid, PageId pid) {
        // some code goes here
        // not necessary for lab1|lab2
        lockManager.releaseLock(tid, pid);
    }

    /**
     * Release all locks associated with a given transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     */
    public void transactionComplete(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
        transactionComplete(tid, true);
    }

    /** Return true if the specified transaction has a lock on the specified page */
    public boolean holdsLock(TransactionId tid, PageId p) {
        // some code goes here
        // not necessary for lab1|lab2
        return lockManager.holdsLock(tid, p);
    }

    /**
     * Commit or abort a given transaction; release all locks associated to
     * the transaction.
     *
     * @param tid the ID of the transaction requesting the unlock
     * @param commit a flag indicating whether we should commit or abort
     */
    public void transactionComplete(TransactionId tid, boolean commit)
        throws IOException {
        // some code goes here
        // not necessary for lab1|lab2

        if (commit){
            try{
                flushPages(tid);
            } catch (IOException e){
                e.printStackTrace();
            }

        }else{
            restorePages(tid);
        }

        lockManager.transactionComplete(tid);
    }

    public synchronized void restorePages(TransactionId tid){
        for(LinkedNode node : page_buffer.values()){
            PageId pageId = node.pageId;
            Page page = node.page;
            if(tid.equals(page.isDirty())){
                int tableId = pageId.getTableId();

                DbFile table = Database.getCatalog().getDatabaseFile(tableId);
                Page pageFromDisk = table.readPage(pageId);

                node.page = pageFromDisk;
                page_buffer.put(pageId, node);
                moveToHead(node);
            }
        }
    }


    /**
     * Add a tuple to the specified table on behalf of transaction tid.  Will
     * acquire a write lock on the page the tuple is added to and any other 
     * pages that are updated (Lock acquisition is not needed for lab2). 
     * May block if the lock(s) cannot be acquired.
     * 
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and adds versions of any pages that have 
     * been dirtied to the cache (replacing any existing versions of those pages) so 
     * that future requests see up-to-date pages. 
     *
     * @param tid the transaction adding the tuple
     * @param tableId the table to add the tuple to
     * @param t the tuple to add
     */
    private void updateBufferPool(ArrayList<Page> pages, TransactionId tid) throws DbException{
        for (Page page : pages){
            page.markDirty(true, tid);

            if (page_buffer.size() >= numPages){
                evictPage();
            }

            LinkedNode node = page_buffer.get(page.getId());
            node.page = page;

            page_buffer.put(page.getId(), node);
        }
    }

    public void insertTuple(TransactionId tid, int tableId, Tuple t)
        throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        // not necessary for lab1
        HeapFile heapFile = (HeapFile) Database.getCatalog().getDatabaseFile(tableId);
        updateBufferPool(heapFile.insertTuple(tid, t), tid);
    }

    /**
     * Remove the specified tuple from the buffer pool.
     * Will acquire a write lock on the page the tuple is removed from and any
     * other pages that are updated. May block if the lock(s) cannot be acquired.
     *
     * Marks any pages that were dirtied by the operation as dirty by calling
     * their markDirty bit, and adds versions of any pages that have 
     * been dirtied to the cache (replacing any existing versions of those pages) so 
     * that future requests see up-to-date pages. 
     *
     * @param tid the transaction deleting the tuple.
     * @param t the tuple to delete
     */
    public  void deleteTuple(TransactionId tid, Tuple t)
        throws DbException, IOException, TransactionAbortedException {
        // some code goes here
        // not necessary for lab1
        HeapFile heapFile = (HeapFile)Database.getCatalog().getDatabaseFile(t.getRecordId().getPageId().getTableId());
        updateBufferPool(heapFile.deleteTuple(tid, t), tid);
    }

    /**
     * Flush all dirty pages to disk.
     * NB: Be careful using this routine -- it writes dirty data to disk so will
     *     break simpledb if running in NO STEAL mode.
     */
    public synchronized void flushAllPages() throws IOException {
        // some code goes here
        // not necessary for lab1
        for (PageId pid : page_buffer.keySet()){
            flushPage(pid);
        }
    }

    /** Remove the specific page id from the buffer pool.
        Needed by the recovery manager to ensure that the
        buffer pool doesn't keep a rolled back page in its
        cache.
        
        Also used by B+ tree files to ensure that deleted pages
        are removed from the cache so they can be reused safely
    */
    public synchronized void discardPage(PageId pid) {
        // some code goes here
        // not necessary for lab1
        remove(page_buffer.get(pid));
        page_buffer.remove(pid);
    }

    /**
     * Flushes a certain page to disk
     * @param pid an ID indicating the page to flush
     */
    private synchronized void flushPage(PageId pid) throws IOException {
        Page p = page_buffer.get(pid).page;
        if (p.isDirty() != null){
            Database.getCatalog().getDatabaseFile(pid.getTableId()).writePage(p);
            p.markDirty(false, null);
        }
    }

    /** Write all pages of the specified transaction to disk.
     */
    public synchronized  void flushPages(TransactionId tid) throws IOException {
        // some code goes here
        // not necessary for lab1|lab2
        for(LinkedNode node : page_buffer.values()){
            PageId pageId = node.pageId;
            Page page = node.page;
            if(tid.equals(page.isDirty())){
                flushPage(pageId);
            }
        }
    }

    /**
     * Discards a page from the buffer pool.
     * Flushes the page to disk to ensure dirty pages are updated on disk.
     */
    private synchronized  void evictPage() throws DbException {

        for (int i = 0; i < numPages ; i++){
            LinkedNode node = removeTail();
            Page evictPage = node.page;
    
            if (evictPage.isDirty() != null){
                addToHead(node);
            }else{
                try{
                    flushPage(node.pageId);
                }catch(IOException e){
                    e.printStackTrace();
                }
                page_buffer.remove(node.pageId);
                return;
            }
        }

        throw new DbException("All Page Are Dirty Page");
    }

}
