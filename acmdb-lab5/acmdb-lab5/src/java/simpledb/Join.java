package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p;
    private DbIterator child1;
    private DbIterator child2;
    private Tuple tuple1;

    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
        this.p = p;
        this.child1 = child1;
        this.child2 = child2;
        tuple1 = null;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        String field1name = child1.getTupleDesc().getFieldName(p.getField1());
        return field1name;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        String field2name = child2.getTupleDesc().getFieldName(p.getField2());
        return field2name;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        TupleDesc tupleDesc = TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
        return tupleDesc;
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        super.open();
    }

    public void close() {
        // some code goes here
        super.close();
        child2.close();
        child1.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        child1.rewind();
        child2.rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        while(child1.hasNext() || tuple1 != null){
            if (child1.hasNext() && tuple1 == null){
                tuple1 = child1.next();
            }
            while (child2.hasNext()){
                Tuple tuple2 = child2.next();
                if (p.filter(tuple1, tuple2)){
                    TupleDesc tupleDesc1 = tuple1.getTupleDesc();
                    TupleDesc tupleDesc2 = tuple2.getTupleDesc();
                    TupleDesc joinTupleDesc = TupleDesc.merge(tupleDesc1, tupleDesc2);
                    Tuple joinTuple = new Tuple(joinTupleDesc);
                    joinTuple.setRecordId(tuple1.getRecordId());
                    int numFields1 = tupleDesc1.numFields();
                    int numFields2 = tupleDesc2.numFields();
                    for (int i = 0; i < numFields1; i++){
                        joinTuple.setField(i, tuple1.getField(i));
                    }
                    for (int j = 0; j < numFields2; j++){
                        joinTuple.setField(numFields1 + j, tuple2.getField(j));
                    }
                    if (!child2.hasNext()){
                        child2.rewind();
                        tuple1 = null;
                    }
                    return joinTuple;
                }
            }
            child2.rewind();
            tuple1 = null;
        }
        return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        return new DbIterator[] {child1, child2};
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
        child1 = children[0];
        child2 = children[1];
    }

}
